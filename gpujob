#!/bin/bash
# gpu utilization given job ID or computing ID
# Ruoshi Sun
# 2025-08-11

function getjobs {
    # arg1: [u]ser/[j]ob
    # arg2: ID
    case $1 in
    u)
        squeue -u $2 -ho "%10A %20N %20P" -t R|awk '$3 ~ /gpu-*/ {print $1, $2}'
        ;;
    j)
        squeue -j $2 -ho "%10A %20N"
        ;;
    *)
        echo "Unknown type"
        exit 1
        ;;
    esac
}

case $# in
0)
    JOBS=$(getjobs u $USER)
    ;;
1)
    if [[ $1 =~ ^[0-9]*$ ]]; then
        JOBS=$(getjobs j $1)
        if ! sacct -j $1 &>/dev/null; then
            echo "Invalid job $1"
            exit 1
        fi
    else
        if ! id $1 &>/dev/null; then
            echo "Invalid user $1"
            exit 1
        fi
        # get job IDs for running gpu jobs only
        JOBS=$(getjobs u $1)
    fi
    ;;
*)    
    echo "Usage: `basename $0`       - GPU statistics of all your running gpu jobs"
    echo "       `basename $0` JobID - GPU statistics of a given job ID"
    exit 1
    ;;
esac

JOBID=( $(echo "$JOBS"|awk '{print $1}') )
NODE=( $(echo "$JOBS"|awk '{print $2}') )

if [ ${#JOBID[@]} -eq 0 ]; then
    echo "No jobs found"
    exit
fi

module purge
ml jobstats parallel || exit 1
printf "%9s %12s %5s %8s %15s\n" "JobID" "Node" "Index" "GPU util" "GPU memory"

function printgpu {
    set -o pipefail
    JOBSTATS=$(jobstats -s $1 2>/dev/null)
    if [ $? -eq 0 ]; then
        echo "$JOBSTATS" |\
        awk '/\(GPU/ {gsub(/\):/,"");print $3,$4}' |\
        pr -2 -t |\
        awk -v j=$1 -v n=$2 '{printf "%9s %12s %5s %8s %15s\n",j,n,$1,$2,$4}'
    else
        echo "(error)"
    fi
}
export -f printgpu

parallel printgpu ::: ${JOBID[@]} :::+ ${NODE[@]} | sort -nk 1
